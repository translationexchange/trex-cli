TML {
Exp
  = ((~TMLExp any)* TMLExp+)+ ~TMLExp any*
  

// TMLLocalizedString* expression
TMLExp
  = Macro "(" StringObjectExp ("," ListOf<ArgsExp, ",">)* ")" space* ";"*

  
Macro
  = "TMLLocalizedString"
  | "TMLLocalizedAttributedString"
  | "TMLLocalizedDate"
  | "TMLLocalizedAttributedDate"


// TMLLocalized argument expression
ArgsExp
  = NullExp | LiteralExp | ObjectExp | MessageExp | ArrayAccessExp | DictAccessExp | VariableExp


// Null Expression
NullExp
  = "nil"
  | "NULL"

ArrayAccessExp
  = VariableExp "[" ArgsExp "]"
  
DictAccessExp
  = VariableExp "{" ArgsExp "]"

VariableExp
  = #(validVarChar+)
  
validVarChar
  = ~("["|"]"|":"|","|")"|"("|space) any

// Literal Objects
LiteralExp
  = NumberExp 
  | StringExp
  
ObjectExp
  = StringObjectExp
  | NumberObjectExp
  | DictExp
  | ArrayExp
  | LiteralWrapExp
  
// Literal Wrap @(WHATEVER)
LiteralWrapExp
  = "@(" VariableExp ")"
  

// Numbers
NumberExp
  = digit+

NumberObjectExp
  = "@" NumberExp

// Strings
StringObjectExp
  = BeginStringQuote stringCharsExp EndStringQuote StringObjectAdditionalLinesExp?
  
StringObjectAdditionalLinesExp
  =  (BeginSecondLineStringQuote stringCharsExp EndStringQuote)*

StringExp
  = "\"" stringCharsExp "\""

stringCharsExp
  = stringChar*

stringChar
  = "\\\""
  | ~"\"" any
  
BeginStringQuote
  = "@\""
  
BeginSecondLineStringQuote
  =  BeginStringQuote
  | "\""

EndStringQuote
  = "\""

// Dictionary
DictExp
  = "@{" ListOf<DictEntryExp, ","> "}"
  
DictEntryExp
  = StringObjectExp ":" DictValueExp
  
DictValueExp
  = ArgsExp


// Array
ArrayExp
  = "@[" ListOf<ArrayEntryExp, ","> "]"

ArrayEntryExp
  = ArgsExp


// Message
MessageExp
  = NoArgumentMessageExp
  | ArgumentMessageExp
  
Receiver
  = #(messageComponentChar+)
  
NoArgumentMessage
  = #(messageComponentChar+)
  
ArgumentMessage
  = #(messageComponentChar+) ":"

NoArgumentMessageExp
  = "[" Receiver NoArgumentMessage "]"

ArgumentMessageExp
  = "[" Receiver (ArgumentMessage ArgsExp)+ "]"

MessageComponent
  = messageComponentChar+

messageComponentChar
  = ~("["|"]"|":"|space) any

}