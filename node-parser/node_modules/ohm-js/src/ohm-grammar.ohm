Ohm {

  Grammars
    = Grammar*

  Grammar
    = ident SuperGrammar? "{" Rule* "}"

  SuperGrammar
    = "<:" ident

  Rule
    = ident Formals? ruleDescr? "="  Alt  -- define
    | ident Formals?            ":=" Alt  -- override
    | ident Formals?            "+=" Alt  -- extend

  Formals
    = "<" ListOf<ident, ","> ">"

  Params
    = "<" ListOf<Seq, ","> ">"

  Alt
    = Term ("|" Term)*

  Term
    = Seq caseName -- inline
    | Seq

  Seq
    = Iter*

  Iter
    = Pred "*"  -- star
    | Pred "+"  -- plus
    | Pred "?"  -- opt
    | Pred

  Pred
    = "~" Lex  -- not
    | "&" Lex  -- lookahead
    | Lex

  Lex
    = "#" Base  -- lex
    | Base

  Base
    = ident Params? ~(ruleDescr? "=" | ":=" | "+=")  -- application
    | Prim ".." Prim                                 -- range
    | Prim                                           -- prim
    | "(" Alt ")"                                    -- paren
    | "[" Alt "]"                                    -- arr
    | "``" Alt "''"                                  -- str
    | "{" "..."? "}"                                 -- obj
    | "{" Props ("," "...")? "}"                     -- objWithProps

  Prim
    = keyword
    | string
    | number

  Props
    = Prop ("," Prop)*

  Prop
    = (name | string) ":" Alt

  ruleDescr  (a rule description)
    = "(" ruleDescrText ")"

  ruleDescrText
    = (~")" any)*

  caseName
    = "--" (~"\n" space)* name (~"\n" space)* ("\n" | &"}")

  name  (a name)
    = nameFirst nameRest*

  nameFirst
    = "_"
    | letter

  nameRest
    = "_"
    | alnum

  ident  (an identifier)
    = ~keyword name

  keyword
    = "null" ~nameRest   -- null
    | "true" ~nameRest   -- true
    | "false" ~nameRest  -- false

  string
    = "\"" strChar* "\""

  strChar
    = escapeChar
    | ~"\\" ~"\"" ~"\n" any

  escapeChar  (an escape sequence)
    = "\\\\"                                     -- backslash
    | "\\\""                                     -- doubleQuote
    | "\\\'"                                     -- singleQuote
    | "\\b"                                      -- backspace
    | "\\n"                                      -- lineFeed
    | "\\r"                                      -- carriageReturn
    | "\\t"                                      -- tab
    | "\\u" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape
    | "\\x" hexDigit hexDigit                    -- hexEscape

  number  (a number)
    = "-"? digit+

  space
   += "//" (~"\n" any)* "\n"  -- singleLine
    | "/*" (~"*/" any)* "*/"  -- multiLine

}
