var ohm = require('..');
module.exports = ohm.makeRecipe(function() {
  return new this.newGrammar("Ohm")
    .withDefaultStartRule('Grammars')
    .define("Grammars", [], this.star(this.app("Grammar")))
    .define("Grammar", [], this.seq(this.app("ident"), this.opt(this.app("SuperGrammar")), this.prim("{"), this.star(this.app("Rule")), this.prim("}")))
    .define("SuperGrammar", [], this.seq(this.prim("<:"), this.app("ident")))
    .define("Rule_define", [], this.seq(this.app("ident"), this.opt(this.app("Formals")), this.opt(this.app("ruleDescr")), this.prim("="), this.app("Alt")))
    .define("Rule_override", [], this.seq(this.app("ident"), this.opt(this.app("Formals")), this.prim(":="), this.app("Alt")))
    .define("Rule_extend", [], this.seq(this.app("ident"), this.opt(this.app("Formals")), this.prim("+="), this.app("Alt")))
    .define("Rule", [], this.alt(this.app("Rule_define"), this.app("Rule_override"), this.app("Rule_extend")))
    .define("Formals", [], this.seq(this.prim("<"), this.app("ListOf", [this.app("ident"), this.prim(",")]), this.prim(">")))
    .define("Params", [], this.seq(this.prim("<"), this.app("ListOf", [this.app("Seq"), this.prim(",")]), this.prim(">")))
    .define("Alt", [], this.seq(this.app("Term"), this.star(this.seq(this.prim("|"), this.app("Term")))))
    .define("Term_inline", [], this.seq(this.app("Seq"), this.app("caseName")))
    .define("Term", [], this.alt(this.app("Term_inline"), this.app("Seq")))
    .define("Seq", [], this.star(this.app("Iter")))
    .define("Iter_star", [], this.seq(this.app("Pred"), this.prim("*")))
    .define("Iter_plus", [], this.seq(this.app("Pred"), this.prim("+")))
    .define("Iter_opt", [], this.seq(this.app("Pred"), this.prim("?")))
    .define("Iter", [], this.alt(this.app("Iter_star"), this.app("Iter_plus"), this.app("Iter_opt"), this.app("Pred")))
    .define("Pred_not", [], this.seq(this.prim("~"), this.app("Lex")))
    .define("Pred_lookahead", [], this.seq(this.prim("&"), this.app("Lex")))
    .define("Pred", [], this.alt(this.app("Pred_not"), this.app("Pred_lookahead"), this.app("Lex")))
    .define("Lex_lex", [], this.seq(this.prim("#"), this.app("Base")))
    .define("Lex", [], this.alt(this.app("Lex_lex"), this.app("Base")))
    .define("Base_application", [], this.seq(this.app("ident"), this.opt(this.app("Params")), this.not(this.alt(this.seq(this.opt(this.app("ruleDescr")), this.prim("=")), this.prim(":="), this.prim("+=")))))
    .define("Base_range", [], this.seq(this.app("Prim"), this.prim(".."), this.app("Prim")))
    .define("Base_prim", [], this.app("Prim"))
    .define("Base_paren", [], this.seq(this.prim("("), this.app("Alt"), this.prim(")")))
    .define("Base_arr", [], this.seq(this.prim("["), this.app("Alt"), this.prim("]")))
    .define("Base_str", [], this.seq(this.prim("``"), this.app("Alt"), this.prim("''")))
    .define("Base_obj", [], this.seq(this.prim("{"), this.opt(this.prim("...")), this.prim("}")))
    .define("Base_objWithProps", [], this.seq(this.prim("{"), this.app("Props"), this.opt(this.seq(this.prim(","), this.prim("..."))), this.prim("}")))
    .define("Base", [], this.alt(this.app("Base_application"), this.app("Base_range"), this.app("Base_prim"), this.app("Base_paren"), this.app("Base_arr"), this.app("Base_str"), this.app("Base_obj"), this.app("Base_objWithProps")))
    .define("Prim", [], this.alt(this.app("keyword"), this.app("string"), this.app("number")))
    .define("Props", [], this.seq(this.app("Prop"), this.star(this.seq(this.prim(","), this.app("Prop")))))
    .define("Prop", [], this.seq(this.alt(this.app("name"), this.app("string")), this.prim(":"), this.app("Alt")))
    .define("ruleDescr", [], this.seq(this.prim("("), this.app("ruleDescrText"), this.prim(")")), "a rule description")
    .define("ruleDescrText", [], this.star(this.seq(this.not(this.prim(")")), this.app("any"))))
    .define("caseName", [], this.seq(this.prim("--"), this.star(this.seq(this.not(this.prim("\n")), this.app("space"))), this.app("name"), this.star(this.seq(this.not(this.prim("\n")), this.app("space"))), this.alt(this.prim("\n"), this.la(this.prim("}")))))
    .define("name", [], this.seq(this.app("nameFirst"), this.star(this.app("nameRest"))), "a name")
    .define("nameFirst", [], this.alt(this.prim("_"), this.app("letter")))
    .define("nameRest", [], this.alt(this.prim("_"), this.app("alnum")))
    .define("ident", [], this.seq(this.not(this.app("keyword")), this.app("name")), "an identifier")
    .define("keyword_null", [], this.seq(this.prim("null"), this.not(this.app("nameRest"))))
    .define("keyword_true", [], this.seq(this.prim("true"), this.not(this.app("nameRest"))))
    .define("keyword_false", [], this.seq(this.prim("false"), this.not(this.app("nameRest"))))
    .define("keyword", [], this.alt(this.app("keyword_null"), this.app("keyword_true"), this.app("keyword_false")))
    .define("string", [], this.seq(this.prim("\""), this.star(this.app("strChar")), this.prim("\"")))
    .define("strChar", [], this.alt(this.app("escapeChar"), this.seq(this.not(this.prim("\\")), this.not(this.prim("\"")), this.not(this.prim("\n")), this.app("any"))))
    .define("escapeChar_backslash", [], this.prim("\\\\"))
    .define("escapeChar_doubleQuote", [], this.prim("\\\""))
    .define("escapeChar_singleQuote", [], this.prim("\\'"))
    .define("escapeChar_backspace", [], this.prim("\\b"))
    .define("escapeChar_lineFeed", [], this.prim("\\n"))
    .define("escapeChar_carriageReturn", [], this.prim("\\r"))
    .define("escapeChar_tab", [], this.prim("\\t"))
    .define("escapeChar_unicodeEscape", [], this.seq(this.prim("\\u"), this.app("hexDigit"), this.app("hexDigit"), this.app("hexDigit"), this.app("hexDigit")))
    .define("escapeChar_hexEscape", [], this.seq(this.prim("\\x"), this.app("hexDigit"), this.app("hexDigit")))
    .define("escapeChar", [], this.alt(this.app("escapeChar_backslash"), this.app("escapeChar_doubleQuote"), this.app("escapeChar_singleQuote"), this.app("escapeChar_backspace"), this.app("escapeChar_lineFeed"), this.app("escapeChar_carriageReturn"), this.app("escapeChar_tab"), this.app("escapeChar_unicodeEscape"), this.app("escapeChar_hexEscape")), "an escape sequence")
    .define("number", [], this.seq(this.opt(this.prim("-")), this.plus(this.app("digit"))), "a number")
    .define("space_singleLine", [], this.seq(this.prim("//"), this.star(this.seq(this.not(this.prim("\n")), this.app("any"))), this.prim("\n")))
    .define("space_multiLine", [], this.seq(this.prim("/*"), this.star(this.seq(this.not(this.prim("*/")), this.app("any"))), this.prim("*/")))
    .extend("space", [], this.alt(this.alt(this.app("space_singleLine"), this.app("space_multiLine")), this.range("\u0000", " ")), "a space")
    .build();
});

